# -*- coding: utf-8 -*-
"""Exercícios de função.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NBmG8sxOjthHxvh2PVCnWlajfsG_T_Yv

## Atividade 1
"""

def tabuada(n):
  '''
  Apresenta a taboada do inteiro n,
  onde 1 <= n <= 9
  '''
  print(f'Tabuada do {n}')
  print('-'*10)
  for i in range(1,11):
    print(f'{i} x {n} = {i*n}')


tabuada(7)

"""## Atividade 2"""

def linha_n1(n):
  '''
  Imprime uma quantidade n de linhas e números
  onde n > 0

  Retorno:
  n = 3
  linha_n1(n)

  1
  2 2
  3 3 3
  '''
  for i in range(1,n+1):
    print(f'{i} '*i, end=' ')
    print()

n = int(input('Digite um numero ae: '))

linha_n1(n)

"""## Atividade 3"""

def linha_n2(n):
  '''
  Imprime uma quantidade n de linhas e números
  onde n > 0

  Retorno:
  n = 3
  linha_n2(n)

  1
  1 2
  1 2 3
  '''
  for i in range(1,n+1):
    for x in range(1,i + 1):
      print(f'{x}', end=' ')
    print()

n = int(input('Digite um numero ae: '))

linha_n2(n)

"""## Atividade 4"""

def formatar_tempo(t):
  '''
  Retorna horário formatado a partir de t segundos
  onde t é um valor númerico.

  Exemplo:
  t = 4814
  formatar_tempo(t)

  Retorno:
  1 hora(s) 20 minuto(s) e 14 segundo(s).
  '''
  minutos = t//60
  hora = minutos//60
  minuto = minutos%60
  segundo = t%60

  print(f'{hora} hora(s) {minuto} minuto(s) e {segundo} segundo(s).')

formatar_tempo(3600)
formatar_tempo(4814)

"""## Atividade 5"""

def checar_n_primo(n):
  '''
  Retorna a partir de um valor n inteiro
  True se for um número primo e False para um não primo.

  Exemplo:

  checar_n_primo(5)
  Retorno:
  True

  checar_n_primo(6)
  Retorno:
  False
  '''
  if n <= 1: return False
  if n == 2: return True
  contador_impar = 3

  while contador_impar <= n:
    if n%contador_impar == 0:
      break
    contador_impar += 2

  if n == contador_impar:
    return True

  return False

n = int(input('Digite um numero ae: '))
checar_n_primo(n)

"""## Atividade 6"""

def checar_tamanho_n(n):
  '''
  A partir de um valor n inteiro, retorna
  o tamanho do valor númerico.

  Exemplo:

  checar_tamanho_n(1234)

  Retorno:

  4

  '''
  n_str = str(n)
  if not n_str.isnumeric():
    return False
  return len(n_str)

checar_tamanho_n(7777)

"""## Atividade 7"""

def todos_iguais(sequencia):
  '''
  A partir de uma lista, retorna True
  se todos os elementos possuem mesmo valor,
  caso contrário, retorna False

  Exemplo:

  todos_iguais([2,2,2,2])
  todos_iguais([2,2,5,2])

  Retorno:

  True
  False
  '''
  ele1 = sequencia[0]

  for elemento in sequencia:
    if elemento != ele1:
      return False

  return True

todos_iguais([1,1,1,1,1,1])

"""## Atividade 8"""

def todos_diferentes(sequencia):
  '''
  A partir de uma lista, retorna True
  se todos os elementos possuem mesmo valor,
  caso contrário, retorna False

  Exemplo:

  todos_iguais([2,2,2,2])
  todos_iguais([2,2,5,2])

  Retorno:

  True
  False
  '''
  return len(set(sequencia)) == len(sequencia)

print(todos_diferentes([1,2,3,5,5]))

"""## Atividade 9

"""

def indice_elemento(n, seq):
  '''
  A partir de um valor n de uma lista e de uma lista,
  retorna a posição deste elemento na lista passada como parâmetro,
  caso o elemento não exista na lista, retorna o último valor da lista.

  Exemplo:

  indice_elemento(0,[1,0,3,4])
  indice_elemento(8,[1,0,3,4])

  Retorno:

   1
  -1
  '''
  return seq.index(n) if n in seq else -1

indice_elemento(8,[1,0,3,4])

"""## Atividade 10"""

def pot2(n):
  '''
  A partir de um valor n, retorna a menor potência de 2
  maior ou igual a n.

  Exemplo:

  pot2(14)
  pot2(42)

  Retorno:

  16
  64

  '''
  for i in range(n+1):
    pot = 2**i
    if pot >= n:
      return pot

pot2(43)

"""## Atividade 11"""

def decompor_n(numero):
  '''
  A partir de um valor n > 0, retorna
  uma lista contendo os números primos que decompoe n.

  Exemplo:

  decompor_n(36)
  decompor_n(5)

  Retorno:

  [2,2,3,3]
  [5]
  '''
  fatores = []
  divisor = 2

  while numero > 1:
    if numero % divisor == 0:
      fatores.append(divisor)
      numero //= divisor
    else:
      divisor += 1

  return fatores

decompor_n(23)

"""## Atividade 12"""

def maiorN(lista,N):
  '''
  A partir de uma lista de números e um valor n,
  onde 1 <= n <= len(lista), retorna o Nésimo maior
  valor da lista.

  Exemplo:

  maiorN([5,0,-1,7,9], 2)

  Retorno:

  7
  '''
  if N <= 1: return max(lista)
  if N > len(lista): return min(lista)
  lista_copia = lista.copy()
  lista_copia.sort()

  return lista_copia.pop(-N)

lista = [5,0,-1,7,-3,9]
N = 2

print(f'Em {lista} o {N}o. maior valor é {maiorN(lista, N)}')

"""## Atividade 13"""

def div(dividendo, divisor):
  '''
  A partir de um dividendo e um divisor,
  retorna a divisão inteira de dividendo/divisor, havendo
  em seu processamento recursividade.

  Exemplo:

  div(7,2)

  Retorno:

  3
  '''
  if dividendo < divisor: return 0
  return 1 + div(dividendo - divisor, divisor)

print(div(6,3))

"""## Atividade 14"""

def imc(peso, altura):
  '''
  A partir de um peso e altura (ambos valores númericos),
  calcula e retorna seu IMC e sua classifição.

  Classificações:
    Magreza imc < 18.5
    Normal 18.5 <= imc <= 25
    Sobrepeso 25 <= imc <= 30
    Obesidade 30 <= imc < 40
    Obesidade Grave imc >= 40

  Exemplo:

  imc(59,1.64)

  Retorno:

  (21.9,'Normal')
  '''
  imc = peso / altura**2
  return imc, 'Magreza' if imc < 18.5 else 'Normal' if imc >= 18.5 and imc < 25 else 'Sobrepeso' if imc >= 25 and imc < 30 else 'Obesidade' if imc >= 30 and imc < 40 else 'Obesidade Grave'

imc, classificacao = imc(59,1.64)

print(f'IMC = {imc: .1f}')
print(f'Classificação = {classificacao}')

"""## Atividade 15"""

def raiz(N,show=False):
  '''
  Calcula a raiz quadrada de N
  Usando o algoritmo:
  x_(n+1) = 1/2 * (x_n + N/x_n)

  raiz(N, show=False)

  N é um valor númerico onde será retirada sua raiz quadrada.
  show é o parâmetro que dá visibilidade ao calculo da raiz de N.

  Exemplo:

  raiz(5,True)

  Retorno:

  ]

  Exemplo:

  raiz(5,True)
  raiz(5)

  Retorno:

  x_1 =  1.00000
  x_2 =  3.00000
  x_3 =  2.33333
  x_4 =  2.23810
  x_5 =  2.23607
  2.236067977499978

  2.236067977499978

  '''

  if N == 0 or N == 1:
    return N
  if N < 0:
    N = -N

  x = 1
  i = 1
  while abs(x*x - N) > 1e-9:
    if show == True:
      print(f'x_{i} = {x: .5f}')
    x = 1/2 * (x + N/x)
    i += 1

  return x

raiz(5,True)